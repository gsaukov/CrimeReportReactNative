/*
 * This file is generated by jOOQ.
 */
package au.edu.unimelb.crbilby.db.tables;


import au.edu.unimelb.crbilby.db.CrDb;
import au.edu.unimelb.crbilby.db.tables.records.CaseEvidenceRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * The table <code>cr_db.case_evidence</code>.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CaseEvidence extends TableImpl<CaseEvidenceRecord> {

    private static final long serialVersionUID = 57748326;

    /**
     * The reference instance of <code>cr_db.case_evidence</code>
     */
    public static final CaseEvidence CASE_EVIDENCE = new CaseEvidence();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CaseEvidenceRecord> getRecordType() {
        return CaseEvidenceRecord.class;
    }

    /**
     * The column <code>cr_db.case_evidence.id</code>.
     */
    public final TableField<CaseEvidenceRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>cr_db.case_evidence.case</code>.
     */
    public final TableField<CaseEvidenceRecord, Integer> CASE = createField("case", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cr_db.case_evidence.evidence</code>.
     */
    public final TableField<CaseEvidenceRecord, String> EVIDENCE = createField("evidence", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * Create a <code>cr_db.case_evidence</code> table reference
     */
    public CaseEvidence() {
        this(DSL.name("case_evidence"), null);
    }

    /**
     * Create an aliased <code>cr_db.case_evidence</code> table reference
     */
    public CaseEvidence(String alias) {
        this(DSL.name(alias), CASE_EVIDENCE);
    }

    /**
     * Create an aliased <code>cr_db.case_evidence</code> table reference
     */
    public CaseEvidence(Name alias) {
        this(alias, CASE_EVIDENCE);
    }

    private CaseEvidence(Name alias, Table<CaseEvidenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private CaseEvidence(Name alias, Table<CaseEvidenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CrDb.CR_DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CaseEvidenceRecord, Integer> getIdentity() {
        return Internal.createIdentity(au.edu.unimelb.crbilby.db.tables.CaseEvidence.CASE_EVIDENCE, au.edu.unimelb.crbilby.db.tables.CaseEvidence.CASE_EVIDENCE.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CaseEvidenceRecord> getPrimaryKey() {
        return Internal.createUniqueKey(au.edu.unimelb.crbilby.db.tables.CaseEvidence.CASE_EVIDENCE, "KEY_case_evidence_PRIMARY", au.edu.unimelb.crbilby.db.tables.CaseEvidence.CASE_EVIDENCE.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CaseEvidenceRecord>> getKeys() {
        return Arrays.<UniqueKey<CaseEvidenceRecord>>asList(
              Internal.createUniqueKey(au.edu.unimelb.crbilby.db.tables.CaseEvidence.CASE_EVIDENCE, "KEY_case_evidence_PRIMARY", au.edu.unimelb.crbilby.db.tables.CaseEvidence.CASE_EVIDENCE.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CaseEvidence as(String alias) {
        return new CaseEvidence(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CaseEvidence as(Name alias) {
        return new CaseEvidence(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CaseEvidence rename(String name) {
        return new CaseEvidence(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CaseEvidence rename(Name name) {
        return new CaseEvidence(name, null);
    }
}
