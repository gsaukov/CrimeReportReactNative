/*
 * This file is generated by jOOQ.
 */
package au.edu.unimelb.crbilby.db.tables;


import au.edu.unimelb.crbilby.db.CrDb;
import au.edu.unimelb.crbilby.db.tables.records.CaseRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * The table <code>cr_db.case</code>.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Case extends TableImpl<CaseRecord> {

    private static final long serialVersionUID = -782898553;

    /**
     * The reference instance of <code>cr_db.case</code>
     */
    public static final Case CASE = new Case();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CaseRecord> getRecordType() {
        return CaseRecord.class;
    }

    /**
     * The column <code>cr_db.case.id</code>.
     */
    public final TableField<CaseRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>cr_db.case.profile</code>.
     */
    public final TableField<CaseRecord, String> PROFILE = createField("profile", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>cr_db.case.type</code>.
     */
    public final TableField<CaseRecord, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>cr_db.case.address</code>.
     */
    public final TableField<CaseRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>cr_db.case.date</code>.
     */
    public final TableField<CaseRecord, Timestamp> DATE = createField("date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>cr_db.case.description</code>.
     */
    public final TableField<CaseRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>cr_db.case.longitude</code>.
     */
    public final TableField<CaseRecord, Double> LONGITUDE = createField("longitude", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>cr_db.case.latitude</code>.
     */
    public final TableField<CaseRecord, Double> LATITUDE = createField("latitude", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>cr_db.case.post</code>.
     */
    public final TableField<CaseRecord, Integer> POST = createField("post", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cr_db.case.is_closed</code>.
     */
    public final TableField<CaseRecord, Integer> IS_CLOSED = createField("is_closed", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>cr_db.case</code> table reference
     */
    public Case() {
        this(DSL.name("case"), null);
    }

    /**
     * Create an aliased <code>cr_db.case</code> table reference
     */
    public Case(String alias) {
        this(DSL.name(alias), CASE);
    }

    /**
     * Create an aliased <code>cr_db.case</code> table reference
     */
    public Case(Name alias) {
        this(alias, CASE);
    }

    private Case(Name alias, Table<CaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private Case(Name alias, Table<CaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CrDb.CR_DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CaseRecord, Integer> getIdentity() {
        return Internal.createIdentity(au.edu.unimelb.crbilby.db.tables.Case.CASE, au.edu.unimelb.crbilby.db.tables.Case.CASE.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CaseRecord> getPrimaryKey() {
        return Internal.createUniqueKey(au.edu.unimelb.crbilby.db.tables.Case.CASE, "KEY_case_PRIMARY", au.edu.unimelb.crbilby.db.tables.Case.CASE.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CaseRecord>> getKeys() {
        return Arrays.<UniqueKey<CaseRecord>>asList(
              Internal.createUniqueKey(au.edu.unimelb.crbilby.db.tables.Case.CASE, "KEY_case_PRIMARY", au.edu.unimelb.crbilby.db.tables.Case.CASE.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Case as(String alias) {
        return new Case(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Case as(Name alias) {
        return new Case(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Case rename(String name) {
        return new Case(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Case rename(Name name) {
        return new Case(name, null);
    }
}
